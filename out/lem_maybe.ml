(*Generated by Lem from maybe.lem.*)
 

open Lem_bool
open Lem_basic_classes
open Lem_function

(* ========================================================================== *)
(* Basic stuff                                                                *)
(* ========================================================================== *)

(*type maybe 'a = 
  | Nothing
  | Just of 'a*)


(*val maybeEqual : forall 'a. Eq 'a => maybe 'a -> maybe 'a -> bool*)
(*val maybeEqualBy : forall 'a. ('a -> 'a -> bool) -> maybe 'a -> maybe 'a -> bool*)

(*let maybeEqualBy eq x y:bool=  match (x,y) with
  | (Nothing, Nothing) -> true
  | (Nothing, Just _) -> false
  | (Just _, Nothing) -> false
  | (Just x', Just y') -> (eq x' y')
end*)

let instance_Basic_classes_Eq_Maybe_maybe_dict dict_Basic_classes_Eq_a:('a option)eq_class= ({

  isEqual_method = (Lem.option_equal  
  dict_Basic_classes_Eq_a.isEqual_method);

  isInequal_method = (fun x y->not ((Lem.option_equal  
  dict_Basic_classes_Eq_a.isEqual_method x y)))})  


let maybeCompare cmp x y:int=  ((match (x,y) with
  | (None, None) -> 0
  | (None, Some _) -> (-1)
  | (Some _, None) -> 1
  | (Some x', Some y') -> cmp x' y'
))

let instance_Basic_classes_SetType_Maybe_maybe_dict dict_Basic_classes_SetType_a:('a option)setType_class= ({

  setElemCompare_method = (maybeCompare  
  dict_Basic_classes_SetType_a.setElemCompare_method)})

let instance_Basic_classes_Ord_Maybe_maybe_dict dict_Basic_classes_Ord_a:('a option)ord_class= ({

  compare_method = (maybeCompare  
  dict_Basic_classes_Ord_a.compare_method);

  isLess_method = (fun m1 -> (fun m2 -> Lem.orderingEqual (maybeCompare  
  dict_Basic_classes_Ord_a.compare_method m1 m2) (-1)));

  isLessEqual_method = (fun m1 -> (fun m2 -> (let r = (maybeCompare  
  dict_Basic_classes_Ord_a.compare_method m1 m2) in Lem.orderingEqual r (-1) || Lem.orderingEqual r 0)));

  isGreater_method = (fun m1 -> (fun m2 -> Lem.orderingEqual (maybeCompare  
  dict_Basic_classes_Ord_a.compare_method m1 m2) 1));

  isGreaterEqual_method = (fun m1 -> (fun m2 -> (let r = (maybeCompare  
  dict_Basic_classes_Ord_a.compare_method m1 m2) in Lem.orderingEqual r 1 || Lem.orderingEqual r 0)))})

(* ----------------------- *)
(* maybe                   *)
(* ----------------------- *)

(*val maybe : forall 'a 'b. 'b -> ('a -> 'b) -> maybe 'a -> 'b*)
(*let maybe d f mb:'b=  match mb with 
  | Just a -> f a
  | Nothing -> d
end*)

(* ----------------------- *)
(* isJust / isNothing      *)
(* ----------------------- *)

(*val isJust : forall 'a. maybe 'a -> bool*)
(*let isJust mb:bool=  match mb with 
  | Just _ -> true
  | Nothing -> false
end*)

(*val isNothing : forall 'a. maybe 'a -> bool*)
(*let isNothing mb:bool=  match mb with 
  | Just _ -> false
  | Nothing -> true
end*)

(* ----------------------- *)
(* fromMaybe               *)
(* ----------------------- *)

(*val fromMaybe : forall 'a. 'a -> maybe 'a -> 'a*)
(*let fromMaybe d mb:'a=  match mb with
   | Just v  -> v
   | Nothing -> d
end*)

(* ----------------------- *)
(* map                     *)
(* ----------------------- *)

(*val map : forall 'a 'b. ('a -> 'b) -> maybe 'a -> maybe 'b*) 
(*let map f:maybe 'a ->maybe 'b=  maybe Nothing (fun v -> Just (f v))*)


(* ----------------------- *)
(* bind                    *)
(* ----------------------- *)

(*val bind : forall 'a 'b. maybe 'a -> ('a -> maybe 'b) -> maybe 'b*) 
(*let bind mb f:maybe 'b=  maybe Nothing f mb*)
